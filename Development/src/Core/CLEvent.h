/*
Crystal Layer
Copyright (C) 2018 Colin Payette <colin@cpayette.com>

This software is provided 'as-is', without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software
    in a product, an acknowledgment in the product documentation would be
    appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
    misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
*/
#ifndef _INCLUDE_CLEVENT_H
#define _INCLUDE_CLEVENT_H

#define CL_SCANCODE_MASK (1<<30)
#define CL_KEYCODE_FROM_SCANCODE(X)  (X | CL_SCANCODE_MASK)

#include "SDL.h"
#include "CLTypes.h"

enum CLEventType
{
	CL_FIRSTEVENT = 0,

	/* Application events */
	CL_QUIT = 0x100, /**< User-requested quit */

	/* Display events */
	CL_DISPLAYEVENT = 0x150, /**< Display state change */

	/* Window events */
	CL_WINDOWEVENT = 0x200,  /**< Window state change */
	CL_SYSWMEVENT,           /**< System specific event */

	/* Keyboard events */
	CL_KEYDOWN = 0x300,      /**< Key pressed */
	CL_KEYUP,                /**< Key released */
	CL_TEXTEDITING,          /**< Keyboard text editing (composition) */
	CL_TEXTINPUT,            /**< Keyboard text input */
	CL_KEYMAPCHANGED,        /**< Keymap changed due to a system event such as an
								  input language or keyboard layout change. */

	/* Mouse events */
	CL_MOUSEMOTION = 0x400,  /**< Mouse moved */
	CL_MOUSEBUTTONDOWN,      /**< Mouse button pressed */
	CL_MOUSEBUTTONUP,        /**< Mouse button released */
	CL_MOUSEWHEEL,           /**< Mouse wheel motion */

	/* Joystick events */
	CL_JOYAXISMOTION = 0x600, /**< Joystick axis motion */
	CL_JOYBALLMOTION,         /**< Joystick trackball motion */
	CL_JOYHATMOTION,          /**< Joystick hat position change */
	CL_JOYBUTTONDOWN,         /**< Joystick button pressed */
	CL_JOYBUTTONUP,           /**< Joystick button released */
	CL_JOYDEVICEADDED,        /**< A new joystick has been inserted into the system */
	CL_JOYDEVICEREMOVED,      /**< An opened joystick has been removed */

	/* Game controller events */
	CL_CONTROLLERAXISMOTION = 0x650, /**< Game controller axis motion */
	CL_CONTROLLERBUTTONDOWN,         /**< Game controller button pressed */
	CL_CONTROLLERBUTTONUP,           /**< Game controller button released */
	CL_CONTROLLERDEVICEADDED,        /**< A new Game controller has been inserted into the system */
	CL_CONTROLLERDEVICEREMOVED,      /**< An opened Game controller has been removed */
	CL_CONTROLLERDEVICEREMAPPED,     /**< The controller mapping was updated */

	CL_LASTEVENT = 0xFFFF
};

enum CLKeyCode
{
	CLK_UNKNOWN = 0,

	CLK_RETURN = '\r',
	CLK_ESCAPE = '\033',
	CLK_BACKSPACE = '\b',
	CLK_TAB = '\t',
	CLK_SPACE = ' ',
	CLK_EXCLAIM = '!',
	CLK_QUOTEDBL = '"',
	CLK_HASH = '#',
	CLK_PERCENT = '%',
	CLK_DOLLAR = '$',
	CLK_AMPERSAND = '&',
	CLK_QUOTE = '\'',
	CLK_LEFTPAREN = '(',
	CLK_RIGHTPAREN = ')',
	CLK_ASTERISK = '*',
	CLK_PLUS = '+',
	CLK_COMMA = ',',
	CLK_MINUS = '-',
	CLK_PERIOD = '.',
	CLK_SLASH = '/',
	CLK_0 = '0',
	CLK_1 = '1',
	CLK_2 = '2',
	CLK_3 = '3',
	CLK_4 = '4',
	CLK_5 = '5',
	CLK_6 = '6',
	CLK_7 = '7',
	CLK_8 = '8',
	CLK_9 = '9',
	CLK_COLON = ':',
	CLK_SEMICOLON = ';',
	CLK_LESS = '<',
	CLK_EQUALS = '=',
	CLK_GREATER = '>',
	CLK_QUESTION = '?',
	CLK_AT = '@',
	CLK_LEFTBRACKET = '[',
	CLK_BACKSLASH = '\\',
	CLK_RIGHTBRACKET = ']',
	CLK_CARET = '^',
	CLK_UNDERSCORE = '_',
	CLK_BACKQUOTE = '`',
	CLK_a = 'a',
	CLK_b = 'b',
	CLK_c = 'c',
	CLK_d = 'd',
	CLK_e = 'e',
	CLK_f = 'f',
	CLK_g = 'g',
	CLK_h = 'h',
	CLK_i = 'i',
	CLK_j = 'j',
	CLK_k = 'k',
	CLK_l = 'l',
	CLK_m = 'm',
	CLK_n = 'n',
	CLK_o = 'o',
	CLK_p = 'p',
	CLK_q = 'q',
	CLK_r = 'r',
	CLK_s = 's',
	CLK_t = 't',
	CLK_u = 'u',
	CLK_v = 'v',
	CLK_w = 'w',
	CLK_x = 'x',
	CLK_y = 'y',
	CLK_z = 'z',

	/*CLK_CAPSLOCK = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_CAPSLOCK),

	CLK_F1 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F1),
	CLK_F2 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F2),
	CLK_F3 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F3),
	CLK_F4 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F4),
	CLK_F5 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F5),
	CLK_F6 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F6),
	CLK_F7 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F7),
	CLK_F8 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F8),
	CLK_F9 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F9),
	CLK_F10 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F10),
	CLK_F11 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F11),
	CLK_F12 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F12),*/

	/*CLK_PRINTSCREEN = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_PRINTSCREEN),
	CLK_SCROLLLOCK = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_SCROLLLOCK),
	CLK_PAUSE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_PAUSE),
	CLK_INSERT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_INSERT),
	CLK_HOME = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_HOME),
	CLK_PAGEUP = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_PAGEUP),
	CLK_DELETE = '\177',
	CLK_END = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_END),
	CLK_PAGEDOWN = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_PAGEDOWN),*/
	CLK_RIGHT = CL_KEYCODE_FROM_SCANCODE(79),
	CLK_LEFT = CL_KEYCODE_FROM_SCANCODE(80),
	CLK_DOWN = CL_KEYCODE_FROM_SCANCODE(81),
	CLK_UP = CL_KEYCODE_FROM_SCANCODE(82),

	/*CLK_NUMLOCKCLEAR = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_NUMLOCKCLEAR),
	CLK_KP_DIVIDE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_DIVIDE),
	CLK_KP_MULTIPLY = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_MULTIPLY),
	CLK_KP_MINUS = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_MINUS),
	CLK_KP_PLUS = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_PLUS),
	CLK_KP_ENTER = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_ENTER),
	CLK_KP_1 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_1),
	CLK_KP_2 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_2),
	CLK_KP_3 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_3),
	CLK_KP_4 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_4),
	CLK_KP_5 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_5),
	CLK_KP_6 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_6),
	CLK_KP_7 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_7),
	CLK_KP_8 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_8),
	CLK_KP_9 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_9),
	CLK_KP_0 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_0),
	CLK_KP_PERIOD = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_PERIOD),*/

	/*CLK_APPLICATION = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_APPLICATION),
	CLK_POWER = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_POWER),
	CLK_KP_EQUALS = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_EQUALS),
	CLK_F13 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F13),
	CLK_F14 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F14),
	CLK_F15 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F15),
	CLK_F16 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F16),
	CLK_F17 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F17),
	CLK_F18 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F18),
	CLK_F19 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F19),
	CLK_F20 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F20),
	CLK_F21 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F21),
	CLK_F22 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F22),
	CLK_F23 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F23),
	CLK_F24 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_F24),
	CLK_EXECUTE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_EXECUTE),
	CLK_HELP = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_HELP),
	CLK_MENU = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_MENU),
	CLK_SELECT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_SELECT),
	CLK_STOP = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_STOP),
	CLK_AGAIN = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AGAIN),
	CLK_UNDO = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_UNDO),
	CLK_CUT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_CUT),
	CLK_COPY = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_COPY),
	CLK_PASTE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_PASTE),
	CLK_FIND = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_FIND),
	CLK_MUTE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_MUTE),
	CLK_VOLUMEUP = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_VOLUMEUP),
	CLK_VOLUMEDOWN = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_VOLUMEDOWN),
	CLK_KP_COMMA = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_COMMA),
	CLK_KP_EQUALSAS400 =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_EQUALSAS400),*/

	/*CLK_ALTERASE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_ALTERASE),
	CLK_SYSREQ = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_SYSREQ),
	CLK_CANCEL = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_CANCEL),
	CLK_CLEAR = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_CLEAR),
	CLK_PRIOR = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_PRIOR),
	CLK_RETURN2 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_RETURN2),
	CLK_SEPARATOR = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_SEPARATOR),
	CLK_OUT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_OUT),
	CLK_OPER = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_OPER),
	CLK_CLEARAGAIN = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_CLEARAGAIN),
	CLK_CRSEL = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_CRSEL),
	CLK_EXSEL = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_EXSEL),*/

	/*CLK_KP_00 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_00),
	CLK_KP_000 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_000),
	CLK_THOUSANDSSEPARATOR =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_THOUSANDSSEPARATOR),
	CLK_DECIMALSEPARATOR =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_DECIMALSEPARATOR),
	CLK_CURRENCYUNIT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_CURRENCYUNIT),
	CLK_CURRENCYSUBUNIT =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_CURRENCYSUBUNIT),
	CLK_KP_LEFTPAREN = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_LEFTPAREN),
	CLK_KP_RIGHTPAREN = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_RIGHTPAREN),
	CLK_KP_LEFTBRACE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_LEFTBRACE),
	CLK_KP_RIGHTBRACE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_RIGHTBRACE),
	CLK_KP_TAB = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_TAB),
	CLK_KP_BACKSPACE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_BACKSPACE),
	CLK_KP_A = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_A),
	CLK_KP_B = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_B),
	CLK_KP_C = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_C),
	CLK_KP_D = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_D),
	CLK_KP_E = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_E),
	CLK_KP_F = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_F),
	CLK_KP_XOR = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_XOR),
	CLK_KP_POWER = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_POWER),
	CLK_KP_PERCENT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_PERCENT),
	CLK_KP_LESS = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_LESS),
	CLK_KP_GREATER = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_GREATER),
	CLK_KP_AMPERSAND = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_AMPERSAND),
	CLK_KP_DBLAMPERSAND =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_DBLAMPERSAND),
	CLK_KP_VERTICALBAR =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_VERTICALBAR),
	CLK_KP_DBLVERTICALBAR =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_DBLVERTICALBAR),
	CLK_KP_COLON = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_COLON),
	CLK_KP_HASH = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_HASH),
	CLK_KP_SPACE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_SPACE),
	CLK_KP_AT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_AT),
	CLK_KP_EXCLAM = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_EXCLAM),
	CLK_KP_MEMSTORE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_MEMSTORE),
	CLK_KP_MEMRECALL = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_MEMRECALL),
	CLK_KP_MEMCLEAR = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_MEMCLEAR),
	CLK_KP_MEMADD = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_MEMADD),
	CLK_KP_MEMSUBTRACT =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_MEMSUBTRACT),
	CLK_KP_MEMMULTIPLY =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_MEMMULTIPLY),
	CLK_KP_MEMDIVIDE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_MEMDIVIDE),
	CLK_KP_PLUSMINUS = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_PLUSMINUS),
	CLK_KP_CLEAR = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_CLEAR),
	CLK_KP_CLEARENTRY = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_CLEARENTRY),
	CLK_KP_BINARY = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_BINARY),
	CLK_KP_OCTAL = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_OCTAL),
	CLK_KP_DECIMAL = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_DECIMAL),
	CLK_KP_HEXADECIMAL =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KP_HEXADECIMAL),*/

	/*CLK_LCTRL = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_LCTRL),
	CLK_LSHIFT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_LSHIFT),
	CLK_LALT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_LALT),
	CLK_LGUI = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_LGUI),
	CLK_RCTRL = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_RCTRL),
	CLK_RSHIFT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_RSHIFT),
	CLK_RALT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_RALT),
	CLK_RGUI = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_RGUI),

	CLK_MODE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_MODE),

	CLK_AUDIONEXT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AUDIONEXT),
	CLK_AUDIOPREV = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AUDIOPREV),
	CLK_AUDIOSTOP = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AUDIOSTOP),
	CLK_AUDIOPLAY = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AUDIOPLAY),
	CLK_AUDIOMUTE = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AUDIOMUTE),
	CLK_MEDIASELECT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_MEDIASELECT),
	CLK_WWW = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_WWW),
	CLK_MAIL = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_MAIL),
	CLK_CALCULATOR = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_CALCULATOR),
	CLK_COMPUTER = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_COMPUTER),
	CLK_AC_SEARCH = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AC_SEARCH),
	CLK_AC_HOME = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AC_HOME),
	CLK_AC_BACK = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AC_BACK),
	CLK_AC_FORWARD = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AC_FORWARD),
	CLK_AC_STOP = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AC_STOP),
	CLK_AC_REFRESH = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AC_REFRESH),
	CLK_AC_BOOKMARKS = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AC_BOOKMARKS),

	CLK_BRIGHTNESSDOWN =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_BRIGHTNESSDOWN),
	CLK_BRIGHTNESSUP = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_BRIGHTNESSUP),
	CLK_DISPLAYSWITCH = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_DISPLAYSWITCH),
	CLK_KBDILLUMTOGGLE =
	CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KBDILLUMTOGGLE),
	CLK_KBDILLUMDOWN = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KBDILLUMDOWN),
	CLK_KBDILLUMUP = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_KBDILLUMUP),
	CLK_EJECT = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_EJECT),
	CLK_SLEEP = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_SLEEP),
	CLK_APP1 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_APP1),
	CLK_APP2 = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_APP2),

	CLK_AUDIOREWIND = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AUDIOREWIND),
	CLK_AUDIOFASTFORWARD = CL_KEYCODE_FROM_SCANCODE(SDL_SCANCODE_AUDIOFASTFORWARD)*/
};

/**
*   
*/
class CLEvent
{
public:

	DLLEXPORT CLEvent();
	DLLEXPORT ~CLEvent();

	DLLEXPORT void        Poll();
	DLLEXPORT CLEventType Type() const { return m_Type; }
	DLLEXPORT CLKeyCode   Code() const { return m_KeyCode; }

private:

	SDL_Event   m_SDLEvent;
	CLEventType m_Type;
	CLKeyCode   m_KeyCode;

};

#endif // _INCLUDE_CLEVENT_H